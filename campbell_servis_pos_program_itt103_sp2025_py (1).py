# -*- coding: utf-8 -*-
"""Campbell.Servis-POS_Program-ITT103-SP2025.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17c31LUQucpN908RJgCBYZINkBAgQ8F9f
"""

import sys

# Items in our store
product_catalog = {
    "Grace Tin Mackerel": {"price": 250, "quantity": 20},
    "Lasco Soy Drink": {"price": 120, "quantity": 30},
    "Jamaica Gold Sugar": {"price": 180, "quantity": 25},
    "Serge Powdered Milk": {"price": 450, "quantity": 15},
    "Counter Flour": {"price": 200, "quantity": 20},
    "Grace Corned Beef": {"price": 400, "quantity": 18},
    "Caribbean Dreams Tea": {"price": 300, "quantity": 12},
    "Island Spice Curry Powder": {"price": 150, "quantity": 22},
    "Lasco Oats": {"price": 170, "quantity": 25},
    "Grace Parboiled Rice (1kg)": {"price": 300, "quantity": 28}
}

# This will be used to add the user items into their cart
shopping_cart = {}

# Function to add items to cart
def add_to_cart():
    print("\nAvailable Products:")
    for name, info in product_catalog.items():
        print(f"{name} - Price: ${info['price']} | Stock: {info['quantity']}")

    product = input("Enter product name: ")
    if product in product_catalog:

        # Try-except block is used to return my own error message if the user enters a number that exceeds our stock or enter an invalid input
        try:
            quantity = int(input("Enter quantity: "))
            if quantity <= 0:  # Ensures the user doesn't enter an invalid quantity
                print("Invalid quantity.")
                return
            if quantity > product_catalog[product]["quantity"]:  # If the quantity the user enters exceeds the amount of stock we have a message is returned
                print("Not enough quantity available.")
                return
            if product in shopping_cart:  # If product is already in the shopping cart increase the quantity
                shopping_cart[product] += quantity
            else:  # Add the product and price to the shopping cart
                shopping_cart[product] = quantity

            # This will subtract the quantity the user wants from the quantity we have available.
            product_catalog[product]["quantity"] -= quantity
            print(f"{quantity} {product} added to cart.")
        except ValueError:
            print("Invalid input. Please enter a numeric value.")
    else:
        print("Product not found.")

def remove_from_cart():
    product = input("Enter product name to remove: ").strip()
    if product in shopping_cart:
        product_catalog[product]["quantity"] += shopping_cart[product]
        del shopping_cart[product]
        print(f"{product} removed from cart.")
    else:
        print("Product not in cart.")

def view_cart():
    if not shopping_cart:
        print("Cart is empty.")
        return
    print("\nShopping Cart:")
    total = 0
    for product, quantity in shopping_cart.items():
        price = product_catalog[product]["price"] * quantity
        total += price
        print(f"{product} ------------- {quantity} x ${product_catalog[product]['price']} = ${price}")
    print(f"Subtotal: ${total}")

def checkout():
    if not shopping_cart:
        print("Cart is empty. Cannot proceed to checkout.")
        return
    subtotal = sum(product_catalog[item]["price"] * quantity for item, quantity in shopping_cart.items())
    tax = round(subtotal * 0.10, 2)
    total = subtotal + tax
    if total > 5000:
        discount = round(total * 0.05, 2)
        total -= discount
        print(f"5% discount applied: -${discount}")
    print(f"Subtotal: ${subtotal}")
    print(f"Sales Tax (10%): ${tax}")
    print(f"Total Due: ${total}")
    while True:
        try:
            payment = float(input("Enter amount received: "))
            if payment < total:
                print("Insufficient payment.")
            else:
                change = round(payment - total, 2)
                print(f"Change: ${change}")
                generate_receipt(subtotal, tax, total, payment, change, discount)
                shopping_cart.clear()
                break
        except ValueError:
            print("Invalid input. Please enter a numeric value.")

def generate_receipt(subtotal, tax, total, payment, change, discount):
    print("\n=====================================")
    print("        BEST BUY RETAIL STORE        ")
    print("        321 Grover Street, MP        ")
    print("        Tel: (876)555-555            ")
    print("====================================")
    print("               RECEIPT              ")
    print("-------------------------------------")
    for product, quantity in shopping_cart.items():
        unit_price = product_catalog[product]['price']
        line_total = unit_price * quantity
        print(f"{product[:25]:<25} {quantity:>2} x ${unit_price:<5} = ${line_total}")
    print("----------------------------------------")
    print(f"Subtotal:                      ${subtotal:.2f}")
    print(f"Sales Tax (10%):                        ${tax:.2f}")

    # Now you can safely check and print the discount

    if discount > 0:
        print(f"Discount (5%):                           -${discount:.2f}")
    print(f"Total Due:                                     ${total:.2f}")
    print(f"Amount Paid:                                   ${payment:.2f}")
    print(f"Change:                                        ${change:.2f}")
    print("======================================================")
    print("          Thank you for shopping with us!             ")
    print("                  Come again soon!                    ")
    print("======================================================")

def main():
    while True:
        print("\nPoint of Sale System")
        print("1. Add Item to Cart")
        print("2. Remove Item from Cart")
        print("3. View Cart")
        print("4. Checkout")
        print("5. Exit")
        try:
                choice = int(input("Enter choice: "))
        except ValueError:
            print("Invalid input. Please enter a number between 1 and 5.")
            continue


        if choice == 1:
            add_to_cart()
        elif choice == 2:
            remove_from_cart()
        elif choice == 3:
            view_cart()
        elif choice == 4:
            checkout()
        elif choice == 5:
            print("Exiting POS system. Goodbye!")
            break
        else:
            print("Invalid choice. Try again.")

main()